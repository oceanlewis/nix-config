#!/usr/bin/env nu -i

let available_commands = [
    config
    backup
    "backup --thin"
    jellyfin
    edit
]

# System management script
def main [] {
  nu -c $"($env.PROCESS_PATH) --help"

  let result = (
    $available_commands
    | str join "\n"
    | ( fzf --prompt="Choose an appropriate subcommand > "
        --height=~100%
        --layout=reverse
      )
    | complete
  )

  match $result.exit_code {
    0 => {
      let cmd = $"($env.PROCESS_PATH) ($result.stdout)"
      print $"Executing command: (ansi blue)($cmd)(ansi reset)\n"
      nu --commands $cmd
      print "Done"
    }
    _ => {
      red $"No valid input provided!"
      $result | print
      exit 1
    }
  }
}

# Manage the system configuration
def "main config" [] { config }
def config [] {
  cd ~/.config/nix-config
  clear -k
  nu -e 'just'
}

# Manage the Jellyfin server
def "main jellyfin" [] { jellyfin }
def jellyfin [] {
    cd /Volumes/Jellyfin
    clear -k

    try {
      just serve
    } catch { |err: error|
        magenta $"\nStarting interactive shell..."
        nu --execute 'just --list'
    }
}

# Edit this script
def "main edit" [] { edit }
def edit [] {
    exec $env.EDITOR $env.CURRENT_FILE
}

# Performs a backup of the current host
def "main backup" [
  --thin(-t) # Removes all but the latest backup
  --skip(-s) # Skips the backup
] {
  match (hostname) {
    "pigeon" => {
      if $skip { red "Skipping backup..." } else { tmutil_backup }
      if $thin { tmutil_thin_backups "/Volumes/Pigeon Backup" }
    }
  }
}

def tmutil_backup [] {
  yellow "Starting backup..."
  tmutil startbackup --block
}

def tmutil_thin_backups [ backup_volume: string ] {
  yellow "\nThinning backups..."

  tmutil listbackups -d $backup_volume -t
  | parse "{timestamp}"
  | drop 1
  | each { sudo tmutil delete -d $backup_volume -t ($in.timestamp) }
  | length  
  | do { print $"Removed ($in) backup\(s)" }
}

def yellow [msg: string] { print $"(ansi yellow)($msg)(ansi reset)" }
def red [msg: string] { print $"(ansi red)($msg)(ansi reset)" }
def magenta [msg: string] { print $"(ansi magenta)($msg)(ansi reset)" }
